#!/bin/sh
_APPLICATION_NAME=console

import git:install/runtime
import console.sh
import git:git/data.app.sh

conf git

_current_time_epoch() {
	date +%s
}

_save_console_history() {
	if [ ! -e $HISTFILE ]; then
		return 1
	fi

	if [ $(wc -l $HISTFILE | awk {'print$1'}) -eq 0 ]; then
	 	return 2
	fi

	local opwd=$PWD
	cd $_PROJECT_PATH
	_console_data_has_changes && _git_save "$(date +'%Y/%m/%d %H:%M:%S')" $_CONSOLE_CONTEXT_ID/activity

	cd $opwd
}

_console_data_has_changes() {
	if [ $(git status --porcelain 2>/dev/null | wc -l) -gt 0 ]; then
		return 0
	fi

	return 1
}

_console_date() {
	date +"$_CONF_INSTALL_DATE_FORMAT"
}

_log() {
	local message="$1"

	[ "$_CONSOLE_CONTEXT_ID" ] && message="[$_CONSOLE_CONTEXT_ID] $1"
	printf '\e[1;3;%sm### %s - %s ###\e[0m\n' "$_CONF_CONSOLE_AUDIT_COLOR" "$message" "$(_console_date)"
}

_after() {
	local -i cmd_status=$?
	[ -z "$_CURRENT_TIME" ] && return

	_log 'After '

	local now=$(_current_time_epoch)
	if [ $now -gt $_TIMEOUT ]; then
		local cmd_status_description=completed
		if [ $cmd_status -gt 0 ]; then
			cmd_status_description=failed
		fi

		cmd_status=$cmd_status _interactive_alert_if "$_COMMAND $cmd_status_description"
	fi

	unset _CURRENT_TIME
}

_before() {
	_CURRENT_TIME=$(_current_time_epoch)
	_COMMAND=$1

	_TIMEOUT=$(($_CURRENT_TIME + $_CONF_CONSOLE_SCRIPT_TIMEOUT))

	_console_is_refresh_context $1 && _console_context
	
	_log Before
}

_init_configuration

[ $_NON_INTERACTIVE ] && exit

_PROJECT_PATH=$_CONF_INSTALL_DATA_PATH/$_APPLICATION_NAME

_WARN=1 _git_init
cd $OLDPWD

HISTSIZE=$_CONF_CONSOLE_ZSH_HISTORY_SIZE
SAVEHIST=$_CONF_CONSOLE_ZSH_HISTORY_SIZE

_defer _save_console_history
trap _on_exit EXIT

_console_context

HISTFILE=$_CONSOLE_CONTEXT_DIRECTORY/activity/$(date +%Y/%m/%d)
mkdir -p $(dirname $HISTFILE)

autoload -U add-zsh-hook
add-zsh-hook precmd _after
add-zsh-hook preexec _before
add-zsh-hook zshexit _save_console_history
